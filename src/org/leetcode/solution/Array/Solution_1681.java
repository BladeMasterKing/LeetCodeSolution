package org.leetcode.solution.Array;

/**
 * <p>最小不兼容性</p>
 * <p>给定一个整数数组 num  和一个整数 k 。你需要将这个数组划分到 k 个相同大小的子集中，使得同一个子集里面没有两个相同的元素。</p>
 * <p>一个子集的 不兼容性 是该子集里面最大值和最小值的差。</p>
 * <p>请返回将数组分成 k 个子集后，各子集 不兼容性 的和的 最小值 ，如果无法分成分成 k 个子集，返回 -1 。</p>
 * <p>子集的定义是数组中一些数字的集合，对数字顺序没有要求。</p>
 *
 * <p>示例 1：</p>
 * <p>输入：nums = [1,2,1,4], k = 2</p>
 * <p>输出：4</p>
 * <p>解释：最优的分配是 [1,2] 和 [1,4] 。</p>
 * <p>不兼容性和为 (2-1) + (4-1) = 4 。</p>
 * <p>注意到 [1,1] 和 [2,4] 可以得到更小的和，但是第一个集合有 2 个相同的元素，所以不可行。</p>
 *
 * <p>示例 2：</p>
 * <p>输入：nums = [6,3,8,1,3,1,2,2], k = 4</p>
 * <p>输出：6</p>
 * <p>解释：最优的子集分配为 [1,2]，[2,3]，[6,8] 和 [1,3] 。</p>
 * <p>不兼容性和为 (2-1) + (3-2) + (8-6) + (3-1) = 6 。</p>
 *
 * <p>示例 3：</p>
 * <p>输入：nums = [5,3,3,6,3,3], k = 3</p>
 * <p>输出：-1</p>
 * <p>解释：没办法将这些数字分配到 3 个子集且满足每个子集里没有相同数字。</p>
 */
public class Solution_1681 {

    public int minimumIncompatibility(int[] nums, int k) {

        return -1;
    }
}
